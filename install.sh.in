#!/usr/bin/env bash
#
# MIT License
#
# (C) Copyright 2020-2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Install the SAT product. This loads the cray/cray-sat docker image into nexus
# so that it can be pulled down by podman and sets up RPM repositories in nexus
# and uploads SAT rpms to those repos. It also uploads the
# cray/cray-product-catalog-update docker image to Nexus, and then uses it to
# add an entry to the cray-product-catalog Kubernetes configuration map.
# Finally, it uses a Loftsman manifest to deploy a Helm chart that creates
# a Kubernetes job to import Ansible configuration content into VCS, and
# it waits for the job's completion.
#
set -e

[ -n "${SAT_INSTALL_DEBUG}" ] && set -x

ROOTDIR="$(dirname "${BASH_SOURCE[0]}")"
source "${ROOTDIR}/lib/version.sh"
source "${ROOTDIR}/lib/install.sh"
source "${ROOTDIR}/install-utils.sh"

print_stage "Installing System Admin Toolkit version ${RELEASE_VERSION}"

print_stage "Loading install dependencies"
load-install-deps

print_stage "Uploading container images to the Docker registry in Nexus"
skopeo-sync "${ROOTDIR}/docker"

print_stage "Setting up Nexus repositories and blobstores"
nexus-setup blobstores   "${ROOTDIR}/nexus-blobstores.yaml"
nexus-setup repositories "${ROOTDIR}/nexus-repositories.yaml"

print_stage "Uploading repository contents"
nexus-upload raw "${ROOTDIR}/rpms/${RELEASE_NAME}-sle-15sp2" "${RELEASE}-sle-15sp2"

print_stage "Uploading helm charts"
nexus-upload helm "${ROOTDIR}/helm" "${CHARTS_REPO:-"charts"}"

print_stage "Deploying loftsman manifests"
loftsman ship --manifest-path "${ROOTDIR}/manifests/sat.yaml" --charts-path "${ROOTDIR}/helm"

print_stage "Adding SAT to cray-product-catalog"
# Note: deploying the manifest above also updates the product catalog but this adds the sat component versions to the
# config map, and it instantaneously updates the config map with the new version.
product_catalog_image=${CRAY_PRODUCT_CATALOG_UPDATE_IMAGE:-registry.local/cray/cray-product-catalog-update:@CPCU_VERSION@}
podman run --rm --name sat-cpc \
    --user="root" \
    -e PRODUCT="sat" \
    -e PRODUCT_VERSION=$RELEASE_VERSION \
    -e KUBECONFIG="/.kube/admin.conf" \
    -e YAML_CONTENT="/cray-product-catalog/sat.yaml" \
    -e VALIDATE_SCHEMA="true" \
    -e SET_ACTIVE_VERSION="true" \
    -v "/etc/kubernetes:/.kube:ro" \
    -v "${ROOTDIR}/cray-product-catalog:/cray-product-catalog:ro" \
    $product_catalog_image

print_stage "Cleaning up install dependencies"
clean-install-deps

# Wait for the sat-config-import job to complete.
config_import_job_timeout=300
config_import_job_name="sat-config-import-${RELEASE_VERSION}"
config_import_job_namespace="services"
config_import_error_message=$(cat <<EOF
Waiting for Kubernetes job ${config_import_job_namespace}/${config_import_job_name} failed.

Please check the job and re-run the installer if the job did not complete successfully.

Run the following to check the job status:
 kubectl describe job --namespace ${config_import_job_namespace} ${config_import_job_name}

Run the following to check the job logs:
 kubectl logs --namespace ${config_import_job_namespace} --selector job-name=${config_import_job_name} --all-containers
EOF
)

print_stage "Waiting ${config_import_job_timeout} seconds for ${config_import_job_name} to complete"
kubectl wait job \
    --timeout="${config_import_job_timeout}s" \
    --namespace="${config_import_job_namespace}" \
    --for=condition=complete \
    "${config_import_job_name}" || exit_with_error "${config_import_error_message}"

print_stage "SAT version ${RELEASE_VERSION} has been installed."
